#BlueJ class context
comment0.target=weatherData
comment1.params=parser\ value
comment1.target=double\ averageTemperatureWithHighHumidityInFile(org.apache.commons.csv.CSVParser,\ int)
comment1.text=\ \ 06\ Write\ the\ method\ [averageTemperatureWithHighHumidityInFile]\ that\ has\ two\ parameters,\ a\ CSVParser\ named\ parser\ and\ an\ integer\ named\ value.\ This\ method\ returns\ a\ double\ that\ represents\ the\ average\ temperature\ of\ only\ those\ temperatures\ when\ the\ humidity\ was\ greater\ than\ or\ equal\ to\ value.\ You\ should\ also\ write\ a\ void\ method\ named\ [testAverageTemperatureWithHighHumidityInFile()]\ to\ test\ this\ method.\ When\ this\ method\ runs\ checking\ for\ humidity\ greater\ than\ or\ equal\ to\ 80\ and\ selects\ the\ file\ for\ January\ 20,\ 2014,\ the\ method\ should\ print\ out\r\n\t\r\n\t1\ \ No\ temperatures\ with\ that\ humidity\r\n\t\r\n\tIf\ you\ run\ the\ method\ checking\ for\ humidity\ greater\ than\ or\ equal\ to\ 80\ and\ select\ the\ file\ March\ 20,\ 2014,\ a\ wetter\ day,\ the\ method\ should\ print\ out\r\n\t\r\n\t1\ \ Average\ Temp\ when\ high\ Humidity\ is\ 41.78666666666667\r\n\t\r\n\t\r\n
comment10.params=file
comment10.target=java.lang.String\ getFileName(java.io.File)
comment10.text=\ 02\ fileWithColdestTemperature\r\n\t\r\n\tWrite\ the\ method\ fileWithColdestTemperature\ that\ has\ no\ parameters.\ This\ method\ should\ return\ a\ string\ that\ is\ the\ name\ of\ the\ file\ from\ selected\ files\ that\ has\ the\ coldest\ temperature.\ You\ should\ also\ write\ a\ void\ method\ named\ testFileWithColdestTemperature()\ to\ test\ this\ method.\ Note\ that\ after\ determining\ the\ filename,\ you\ could\ call\ the\ method\ coldestHourInFile\ to\ determine\ the\ coldest\ temperature\ on\ that\ day.\ \r\n\t\r\n
comment11.params=
comment11.target=java.lang.String\ fileWithColdestTemperature()
comment12.params=
comment12.target=void\ testFileWithColdestTemperature()
comment13.params=currentRecord\ smallestSoFar
comment13.target=org.apache.commons.csv.CSVRecord\ getSmallestOfTwo(org.apache.commons.csv.CSVRecord,\ org.apache.commons.csv.CSVRecord)
comment13.text=\ 01\ Coldest\ Hour\ in\ a\ day\r\n\t\r\n\tWrite\ a\ method\ named\ coldestHourInFile\ that\ has\ one\ parameter,\ a\ CSVParser\ named\ parser.\ This\ method\ returns\ the\ CSVRecord\ with\ the\ coldest\ temperature\ in\ the\ file\ and\ thus\ all\ the\ information\ about\ the\ coldest\ temperature,\ such\ as\ the\ hour\ of\ the\ coldest\ temperature.\ You\ should\ also\ write\ a\ void\ method\ named\ testColdestHourInFile()\ to\ test\ this\ method\ and\ print\ out\ information\ about\ that\ coldest\ temperature,\ such\ as\ the\ time\ of\ its\ occurrence.\r\n\r\n\tNOTE\:\ Sometimes\ there\ was\ not\ a\ valid\ reading\ at\ a\ specific\ hour,\ so\ the\ temperature\ field\ says\ -9999.\ You\ should\ ignore\ these\ bogus\ temperature\ values\ when\ calculating\ the\ lowest\ temperature.\r\n\t\r\n
comment14.params=parser
comment14.target=org.apache.commons.csv.CSVRecord\ coldestHourInFile(org.apache.commons.csv.CSVParser)
comment15.params=
comment15.target=void\ testColdestHourInFile()
comment2.params=
comment2.target=void\ testAverageTemperatureWithHighHumidityInFile()
comment3.params=parser
comment3.target=double\ averageTemperatureInFile(org.apache.commons.csv.CSVParser)
comment3.text=\ 05\ Write\ the\ method\ [averageTemperatureInFile]\ that\ has\ one\ parameter,\ a\ CSVParser\ named\ parser.\ This\ method\ returns\ a\ double\ that\ represents\ the\ average\ temperature\ in\ the\ file.\ You\ should\ also\ write\ a\ void\ method\ named\ [testAverageTemperatureInFile()]\ to\ test\ this\ method.\ When\ this\ method\ runs\ and\ selects\ the\ file\ for\ January\ 20,\ 2014,\ the\ method\ should\ print\ out\r\n\t\r\n\t1\ \ Average\ temperature\ in\ file\ is\ 44.93333333333334\r\n
comment4.params=
comment4.target=void\ testAverageTemperatureInFile()
comment5.params=
comment5.target=org.apache.commons.csv.CSVRecord\ lowestHumidityInManyFiles()
comment5.text=\ 04\ Write\ the\ method\ [lowestHumidityInManyFiles]\ that\ has\ no\ parameters.\ This\ method\ returns\ a\ CSVRecord\ that\ has\ the\ lowest\ humidity\ over\ all\ the\ files.\ If\ there\ is\ a\ tie,\ then\ return\ the\ first\ such\ record\ that\ was\ found.\ You\ should\ also\ write\ a\ void\ method\ named\ [testLowestHumidityInManyFiles()]\ to\ test\ this\ method\ and\ to\ print\ the\ lowest\ humidity\ AND\ the\ time\ the\ lowest\ humidity\ occurred.\ Be\ sure\ to\ test\ this\ method\ on\ two\ files\ so\ you\ can\ check\ if\ it\ is\ working\ correctly.\ If\ you\ run\ this\ program\ and\ select\ the\ files\ for\ January\ 19,\ 2014\ and\ January\ 20,\ 2014,\ you\ should\ get\r\n\t\r\n\t1\ \ Lowest\ Humidity\ was\ 24\ at\ 2014-01-20\ 19\:51\:00\r\n\t\r\n
comment6.params=
comment6.target=void\ testLowestHumidityInManyFiles()
comment7.params=currentRecord\ lowestHumiditySoFar
comment7.target=org.apache.commons.csv.CSVRecord\ getLowestHumidityOfTwo(org.apache.commons.csv.CSVRecord,\ org.apache.commons.csv.CSVRecord)
comment7.text=\ String\ Comparison\ \r\n\t\t\t\r\n\t\t\tIn\ Java,\ string\ equals()\ method\ compares\ the\ two\ given\ strings\ based\ on\ the\ data/content\ of\ the\ string.\ If\ all\ the\ contents\ of\ both\ the\ strings\ are\ same\ then\ it\ returns\ true.\ If\ all\ characters\ do\ not\ match,\ then\ it\ returns\ false.\ \r\n\t\t\t\r\n\t\t\tSyntax\:\r\n\r\n\t\t\tstr1.equals(str2);\r\n\t\t\t\r\n\t\t\tURL\:\ https\://beginnersbook.com/2013/12/java-string-compareto-method-example/\r\n
comment8.params=parser
comment8.target=org.apache.commons.csv.CSVRecord\ lowestHumidityInFile(org.apache.commons.csv.CSVParser)
comment9.params=
comment9.target=void\ testLowestHumidityInFile()
numComments=16
