#BlueJ class context
comment0.target=weatherData
comment1.params=file
comment1.target=java.lang.String\ getFileName(java.io.File)
comment1.text=\ 02\ fileWithColdestTemperature\r\n\t\r\n\tWrite\ the\ method\ fileWithColdestTemperature\ that\ has\ no\ parameters.\ This\ method\ should\ return\ a\ string\ that\ is\ the\ name\ of\ the\ file\ from\ selected\ files\ that\ has\ the\ coldest\ temperature.\ You\ should\ also\ write\ a\ void\ method\ named\ testFileWithColdestTemperature()\ to\ test\ this\ method.\ Note\ that\ after\ determining\ the\ filename,\ you\ could\ call\ the\ method\ coldestHourInFile\ to\ determine\ the\ coldest\ temperature\ on\ that\ day.\ \r\n\t\r\n
comment2.params=
comment2.target=java.lang.String\ fileWithColdestTemperature()
comment3.params=
comment3.target=void\ testFileWithColdestTemperature()
comment4.params=currentRecord\ smallestSoFar
comment4.target=org.apache.commons.csv.CSVRecord\ getSmallestOfTwo(org.apache.commons.csv.CSVRecord,\ org.apache.commons.csv.CSVRecord)
comment4.text=\ 01\ Coldest\ Hour\ in\ a\ day\r\n\t\r\n\tWrite\ a\ method\ named\ coldestHourInFile\ that\ has\ one\ parameter,\ a\ CSVParser\ named\ parser.\ This\ method\ returns\ the\ CSVRecord\ with\ the\ coldest\ temperature\ in\ the\ file\ and\ thus\ all\ the\ information\ about\ the\ coldest\ temperature,\ such\ as\ the\ hour\ of\ the\ coldest\ temperature.\ You\ should\ also\ write\ a\ void\ method\ named\ testColdestHourInFile()\ to\ test\ this\ method\ and\ print\ out\ information\ about\ that\ coldest\ temperature,\ such\ as\ the\ time\ of\ its\ occurrence.\r\n\r\n\tNOTE\:\ Sometimes\ there\ was\ not\ a\ valid\ reading\ at\ a\ specific\ hour,\ so\ the\ temperature\ field\ says\ -9999.\ You\ should\ ignore\ these\ bogus\ temperature\ values\ when\ calculating\ the\ lowest\ temperature.\r\n\t\r\n
comment5.params=parser
comment5.target=org.apache.commons.csv.CSVRecord\ coldestHourInFile(org.apache.commons.csv.CSVParser)
comment6.params=
comment6.target=void\ testColdestHourInFile()
numComments=7
